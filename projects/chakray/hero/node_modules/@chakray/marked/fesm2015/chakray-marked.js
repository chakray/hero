import { DomSanitizer } from '@angular/platform-browser';
import { InjectionToken, Inject, Injectable, Input, Directive, ElementRef, HostListener, Component, NgModule, defineInjectable, inject } from '@angular/core';
import { Router, RouterModule } from '@angular/router';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function mockMdLib$$1() {
    return new MdLib();
}
/** @type {?} */
const mdLib$$1 = new InjectionToken('cm-mdlib', {
    providedIn: 'root',
    factory: mockMdLib$$1
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * common wrapper interface for markdown parser libraries
 */
class MdLib {
    constructor() { }
    /**
     * @param {?} str markdown string
     * @return {?} html string
     */
    parse(str) {
        return 'default markedown parser - ' + str;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MarkedService {
    /**
     * @param {?} lib
     */
    constructor(lib) { }
}
MarkedService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
MarkedService.ctorParameters = () => [
    { type: MdLib, decorators: [{ type: Inject, args: [mdLib$$1,] }] }
];
/** @nocollapse */ MarkedService.ngInjectableDef = defineInjectable({ factory: function MarkedService_Factory() { return new MarkedService(inject(mdLib$$1)); }, token: MarkedService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * wrapper for [marked.js](https://github.com/markedjs/marked)
 * see [[MdLib]] for common apis
 */
class MarkedLib extends MdLib {
    /**
     * @param {?} lib marked lib
     */
    constructor(lib) {
        super();
        this.lib = lib;
    }
    /**
     * @param {?} str markdown string
     * @return {?} html string
     */
    parse(str) {
        return this.lib(str);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * <cm-marked str='*markdown*'>
 */
class CmMarkedTag {
    /**
     * @param {?} sanitizer see external DomSanitizer
     * @param {?} lib see [[MdLib]]
     */
    constructor(sanitizer, lib) {
        this.sanitizer = sanitizer;
        this.lib = lib;
        this.baseUrl = '';
        this._str = '';
    }
    /**
     * str for set markdown string
     * @param {?} v
     * @return {?}
     */
    set str(v) {
        this._str = v;
        /** @type {?} */
        const r = this.lib.parse(v);
        this.html = this.sanitizer.bypassSecurityTrustHtml(r);
    }
}
CmMarkedTag.decorators = [
    { type: Component, args: [{
                selector: 'cm-marked',
                template: "<div [cmEnroute]='baseUrl' [innerHtml]='html'></div>\n",
                styles: [":host{outline:0;border:0}"]
            }] }
];
/** @nocollapse */
CmMarkedTag.ctorParameters = () => [
    { type: DomSanitizer },
    { type: MdLib, decorators: [{ type: Inject, args: [mdLib$$1,] }] }
];
CmMarkedTag.propDecorators = {
    baseUrl: [{ type: Input }],
    str: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmEnrouteAttr {
    /**
     * @param {?} el
     * @param {?} router
     */
    constructor(el, router) {
        this.el = el;
        this.router = router;
        this.baseUrl = '';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        /** @type {?} */
        const attr = event.target.getAttribute('href') || '';
        /** @type {?} */
        const m = attr.split('#');
        /** @type {?} */
        let href = m[0];
        /** @type {?} */
        const fragment = m[1];
        if (href.startsWith('http')) {
            return;
        }
        if (href.includes('..')) {
            /** @type {?} */
            const meg = href.split('/');
            /** @type {?} */
            const n = meg.reduce((/**
             * @param {?} r
             * @param {?} k
             * @return {?}
             */
            (r, k) => {
                return k === '..' ? r + 1 : r;
            }), 0);
            /** @type {?} */
            let seg = this.baseUrl.split('/');
            seg = seg.slice(0, seg.length - n);
            meg.splice(0, n);
            href = seg.join('/') + '/' + meg.join('/');
        }
        else {
            href = this.baseUrl + '/' + href;
        }
        if (event.target.tagName === 'A') {
            if (href) {
                this.router.navigate([href], { fragment });
            }
            else {
                this.router.navigate([], { fragment });
            }
            event.preventDefault();
        }
        else {
            return;
        }
    }
}
CmEnrouteAttr.decorators = [
    { type: Directive, args: [{
                selector: '[cmEnroute]'
            },] }
];
/** @nocollapse */
CmEnrouteAttr.ctorParameters = () => [
    { type: ElementRef },
    { type: Router }
];
CmEnrouteAttr.propDecorators = {
    baseUrl: [{ type: Input, args: ['cmEnroute',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * this module exports [[CmMarkedTag]] for template use
 */
class CmMarkedMod {
}
CmMarkedMod.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CmEnrouteAttr,
                    CmMarkedTag
                ],
                imports: [
                    RouterModule
                ],
                exports: [
                    RouterModule,
                    CmMarkedTag
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { mockMdLib$$1 as mockMdLib, mdLib$$1 as mdLib, MdLib, MarkedService, MarkedLib, CmMarkedTag, CmMarkedMod, CmEnrouteAttr as Éµa };

//# sourceMappingURL=chakray-marked.js.map