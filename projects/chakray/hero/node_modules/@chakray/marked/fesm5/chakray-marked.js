import { __extends } from 'tslib';
import { DomSanitizer } from '@angular/platform-browser';
import { InjectionToken, Inject, Injectable, Input, Directive, ElementRef, HostListener, Component, NgModule, defineInjectable, inject } from '@angular/core';
import { Router, RouterModule } from '@angular/router';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function mockMdLib$$1() {
    return new MdLib();
}
/** @type {?} */
var mdLib$$1 = new InjectionToken('cm-mdlib', {
    providedIn: 'root',
    factory: mockMdLib$$1
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * common wrapper interface for markdown parser libraries
 */
var  /**
 * common wrapper interface for markdown parser libraries
 */
MdLib = /** @class */ (function () {
    function MdLib() {
    }
    /**
     * @param str markdown string
     * @return html string
     */
    /**
     * @param {?} str markdown string
     * @return {?} html string
     */
    MdLib.prototype.parse = /**
     * @param {?} str markdown string
     * @return {?} html string
     */
    function (str) {
        return 'default markedown parser - ' + str;
    };
    return MdLib;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MarkedService = /** @class */ (function () {
    function MarkedService(lib) {
    }
    MarkedService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    MarkedService.ctorParameters = function () { return [
        { type: MdLib, decorators: [{ type: Inject, args: [mdLib$$1,] }] }
    ]; };
    /** @nocollapse */ MarkedService.ngInjectableDef = defineInjectable({ factory: function MarkedService_Factory() { return new MarkedService(inject(mdLib$$1)); }, token: MarkedService, providedIn: "root" });
    return MarkedService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * wrapper for [marked.js](https://github.com/markedjs/marked)
 * see [[MdLib]] for common apis
 */
var  /**
 * wrapper for [marked.js](https://github.com/markedjs/marked)
 * see [[MdLib]] for common apis
 */
MarkedLib = /** @class */ (function (_super) {
    __extends(MarkedLib, _super);
    /**
     * @param lib marked lib
     */
    function MarkedLib(lib) {
        var _this = _super.call(this) || this;
        _this.lib = lib;
        return _this;
    }
    /**
     * @param str markdown string
     * @return html string
     */
    /**
     * @param {?} str markdown string
     * @return {?} html string
     */
    MarkedLib.prototype.parse = /**
     * @param {?} str markdown string
     * @return {?} html string
     */
    function (str) {
        return this.lib(str);
    };
    return MarkedLib;
}(MdLib));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * <cm-marked str='*markdown*'>
 */
var CmMarkedTag = /** @class */ (function () {
    /**
     * @param sanitizer see external DomSanitizer
     * @param lib see [[MdLib]]
     */
    function CmMarkedTag(sanitizer, lib) {
        this.sanitizer = sanitizer;
        this.lib = lib;
        this.baseUrl = '';
        this._str = '';
    }
    Object.defineProperty(CmMarkedTag.prototype, "str", {
        /**
         * str for set markdown string
         */
        set: /**
         * str for set markdown string
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._str = v;
            /** @type {?} */
            var r = this.lib.parse(v);
            this.html = this.sanitizer.bypassSecurityTrustHtml(r);
        },
        enumerable: true,
        configurable: true
    });
    CmMarkedTag.decorators = [
        { type: Component, args: [{
                    selector: 'cm-marked',
                    template: "<div [cmEnroute]='baseUrl' [innerHtml]='html'></div>\n",
                    styles: [":host{outline:0;border:0}"]
                }] }
    ];
    /** @nocollapse */
    CmMarkedTag.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: MdLib, decorators: [{ type: Inject, args: [mdLib$$1,] }] }
    ]; };
    CmMarkedTag.propDecorators = {
        baseUrl: [{ type: Input }],
        str: [{ type: Input }]
    };
    return CmMarkedTag;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CmEnrouteAttr = /** @class */ (function () {
    function CmEnrouteAttr(el, router) {
        this.el = el;
        this.router = router;
        this.baseUrl = '';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    CmEnrouteAttr.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var attr = event.target.getAttribute('href') || '';
        /** @type {?} */
        var m = attr.split('#');
        /** @type {?} */
        var href = m[0];
        /** @type {?} */
        var fragment = m[1];
        if (href.startsWith('http')) {
            return;
        }
        if (href.includes('..')) {
            /** @type {?} */
            var meg = href.split('/');
            /** @type {?} */
            var n = meg.reduce((/**
             * @param {?} r
             * @param {?} k
             * @return {?}
             */
            function (r, k) {
                return k === '..' ? r + 1 : r;
            }), 0);
            /** @type {?} */
            var seg = this.baseUrl.split('/');
            seg = seg.slice(0, seg.length - n);
            meg.splice(0, n);
            href = seg.join('/') + '/' + meg.join('/');
        }
        else {
            href = this.baseUrl + '/' + href;
        }
        if (event.target.tagName === 'A') {
            if (href) {
                this.router.navigate([href], { fragment: fragment });
            }
            else {
                this.router.navigate([], { fragment: fragment });
            }
            event.preventDefault();
        }
        else {
            return;
        }
    };
    CmEnrouteAttr.decorators = [
        { type: Directive, args: [{
                    selector: '[cmEnroute]'
                },] }
    ];
    /** @nocollapse */
    CmEnrouteAttr.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Router }
    ]; };
    CmEnrouteAttr.propDecorators = {
        baseUrl: [{ type: Input, args: ['cmEnroute',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return CmEnrouteAttr;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * this module exports [[CmMarkedTag]] for template use
 */
var CmMarkedMod = /** @class */ (function () {
    function CmMarkedMod() {
    }
    CmMarkedMod.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        CmEnrouteAttr,
                        CmMarkedTag
                    ],
                    imports: [
                        RouterModule
                    ],
                    exports: [
                        RouterModule,
                        CmMarkedTag
                    ]
                },] }
    ];
    return CmMarkedMod;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { mockMdLib$$1 as mockMdLib, mdLib$$1 as mdLib, MdLib, MarkedService, MarkedLib, CmMarkedTag, CmMarkedMod, CmEnrouteAttr as Éµa };

//# sourceMappingURL=chakray-marked.js.map