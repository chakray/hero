(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser'), require('@angular/core'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@chakray/marked', ['exports', '@angular/platform-browser', '@angular/core', '@angular/router'], factory) :
    (factory((global.chakray = global.chakray || {}, global.chakray.marked = {}),global.ng.platformBrowser,global.ng.core,global.ng.router));
}(this, (function (exports,platformBrowser,i0,router) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function mockMdLib$$1() {
        return new MdLib();
    }
    /** @type {?} */
    var mdLib$$1 = new i0.InjectionToken('cm-mdlib', {
        providedIn: 'root',
        factory: mockMdLib$$1
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * common wrapper interface for markdown parser libraries
     */
    var /**
     * common wrapper interface for markdown parser libraries
     */ MdLib = /** @class */ (function () {
        function MdLib() {
        }
        /**
         * @param str markdown string
         * @return html string
         */
        /**
         * @param {?} str markdown string
         * @return {?} html string
         */
        MdLib.prototype.parse = /**
         * @param {?} str markdown string
         * @return {?} html string
         */
            function (str) {
                return 'default markedown parser - ' + str;
            };
        return MdLib;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MarkedService = /** @class */ (function () {
        function MarkedService(lib) {
        }
        MarkedService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        MarkedService.ctorParameters = function () {
            return [
                { type: MdLib, decorators: [{ type: i0.Inject, args: [mdLib$$1,] }] }
            ];
        };
        /** @nocollapse */ MarkedService.ngInjectableDef = i0.defineInjectable({ factory: function MarkedService_Factory() { return new MarkedService(i0.inject(mdLib$$1)); }, token: MarkedService, providedIn: "root" });
        return MarkedService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * wrapper for [marked.js](https://github.com/markedjs/marked)
     * see [[MdLib]] for common apis
     */
    var /**
     * wrapper for [marked.js](https://github.com/markedjs/marked)
     * see [[MdLib]] for common apis
     */ MarkedLib = /** @class */ (function (_super) {
        __extends(MarkedLib, _super);
        /**
         * @param lib marked lib
         */
        function MarkedLib(lib) {
            var _this = _super.call(this) || this;
            _this.lib = lib;
            return _this;
        }
        /**
         * @param str markdown string
         * @return html string
         */
        /**
         * @param {?} str markdown string
         * @return {?} html string
         */
        MarkedLib.prototype.parse = /**
         * @param {?} str markdown string
         * @return {?} html string
         */
            function (str) {
                return this.lib(str);
            };
        return MarkedLib;
    }(MdLib));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * <cm-marked str='*markdown*'>
     */
    var CmMarkedTag = /** @class */ (function () {
        /**
         * @param sanitizer see external DomSanitizer
         * @param lib see [[MdLib]]
         */
        function CmMarkedTag(sanitizer, lib) {
            this.sanitizer = sanitizer;
            this.lib = lib;
            this.baseUrl = '';
            this._str = '';
        }
        Object.defineProperty(CmMarkedTag.prototype, "str", {
            /**
             * str for set markdown string
             */
            set: /**
             * str for set markdown string
             * @param {?} v
             * @return {?}
             */ function (v) {
                this._str = v;
                /** @type {?} */
                var r = this.lib.parse(v);
                this.html = this.sanitizer.bypassSecurityTrustHtml(r);
            },
            enumerable: true,
            configurable: true
        });
        CmMarkedTag.decorators = [
            { type: i0.Component, args: [{
                        selector: 'cm-marked',
                        template: "<div [cmEnroute]='baseUrl' [innerHtml]='html'></div>\n",
                        styles: [":host{outline:0;border:0}"]
                    }] }
        ];
        /** @nocollapse */
        CmMarkedTag.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer },
                { type: MdLib, decorators: [{ type: i0.Inject, args: [mdLib$$1,] }] }
            ];
        };
        CmMarkedTag.propDecorators = {
            baseUrl: [{ type: i0.Input }],
            str: [{ type: i0.Input }]
        };
        return CmMarkedTag;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmEnrouteAttr = /** @class */ (function () {
        function CmEnrouteAttr(el, router$$1) {
            this.el = el;
            this.router = router$$1;
            this.baseUrl = '';
        }
        /**
         * @param {?} event
         * @return {?}
         */
        CmEnrouteAttr.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var attr = event.target.getAttribute('href') || '';
                /** @type {?} */
                var m = attr.split('#');
                /** @type {?} */
                var href = m[0];
                /** @type {?} */
                var fragment = m[1];
                if (href.startsWith('http')) {
                    return;
                }
                if (href.includes('..')) {
                    /** @type {?} */
                    var meg = href.split('/');
                    /** @type {?} */
                    var n = meg.reduce(( /**
                     * @param {?} r
                     * @param {?} k
                     * @return {?}
                     */function (r, k) {
                        return k === '..' ? r + 1 : r;
                    }), 0);
                    /** @type {?} */
                    var seg = this.baseUrl.split('/');
                    seg = seg.slice(0, seg.length - n);
                    meg.splice(0, n);
                    href = seg.join('/') + '/' + meg.join('/');
                }
                else {
                    href = this.baseUrl + '/' + href;
                }
                if (event.target.tagName === 'A') {
                    if (href) {
                        this.router.navigate([href], { fragment: fragment });
                    }
                    else {
                        this.router.navigate([], { fragment: fragment });
                    }
                    event.preventDefault();
                }
                else {
                    return;
                }
            };
        CmEnrouteAttr.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[cmEnroute]'
                    },] }
        ];
        /** @nocollapse */
        CmEnrouteAttr.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: router.Router }
            ];
        };
        CmEnrouteAttr.propDecorators = {
            baseUrl: [{ type: i0.Input, args: ['cmEnroute',] }],
            onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
        };
        return CmEnrouteAttr;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * this module exports [[CmMarkedTag]] for template use
     */
    var CmMarkedMod = /** @class */ (function () {
        function CmMarkedMod() {
        }
        CmMarkedMod.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            CmEnrouteAttr,
                            CmMarkedTag
                        ],
                        imports: [
                            router.RouterModule
                        ],
                        exports: [
                            router.RouterModule,
                            CmMarkedTag
                        ]
                    },] }
        ];
        return CmMarkedMod;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.mockMdLib = mockMdLib$$1;
    exports.mdLib = mdLib$$1;
    exports.MdLib = MdLib;
    exports.MarkedService = MarkedService;
    exports.MarkedLib = MarkedLib;
    exports.CmMarkedTag = CmMarkedTag;
    exports.CmMarkedMod = CmMarkedMod;
    exports.ɵa = CmEnrouteAttr;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=chakray-marked.umd.js.map