/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Directive, ElementRef, HostListener } from '@angular/core';
import { Router } from '@angular/router';
var CmEnrouteAttr = /** @class */ (function () {
    function CmEnrouteAttr(el, router) {
        this.el = el;
        this.router = router;
        this.baseUrl = '';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    CmEnrouteAttr.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var attr = event.target.getAttribute('href') || '';
        /** @type {?} */
        var m = attr.split('#');
        /** @type {?} */
        var href = m[0];
        /** @type {?} */
        var fragment = m[1];
        if (href.startsWith('http')) {
            return;
        }
        if (href.includes('..')) {
            /** @type {?} */
            var meg = href.split('/');
            /** @type {?} */
            var n = meg.reduce((/**
             * @param {?} r
             * @param {?} k
             * @return {?}
             */
            function (r, k) {
                return k === '..' ? r + 1 : r;
            }), 0);
            /** @type {?} */
            var seg = this.baseUrl.split('/');
            seg = seg.slice(0, seg.length - n);
            meg.splice(0, n);
            href = seg.join('/') + '/' + meg.join('/');
        }
        else {
            href = this.baseUrl + '/' + href;
        }
        if (event.target.tagName === 'A') {
            if (href) {
                this.router.navigate([href], { fragment: fragment });
            }
            else {
                this.router.navigate([], { fragment: fragment });
            }
            event.preventDefault();
        }
        else {
            return;
        }
    };
    CmEnrouteAttr.decorators = [
        { type: Directive, args: [{
                    selector: '[cmEnroute]'
                },] }
    ];
    /** @nocollapse */
    CmEnrouteAttr.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Router }
    ]; };
    CmEnrouteAttr.propDecorators = {
        baseUrl: [{ type: Input, args: ['cmEnroute',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return CmEnrouteAttr;
}());
export { CmEnrouteAttr };
if (false) {
    /** @type {?} */
    CmEnrouteAttr.prototype.baseUrl;
    /**
     * @type {?}
     * @private
     */
    CmEnrouteAttr.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CmEnrouteAttr.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5yb3V0ZS5hdHRyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNoYWtyYXkvbWFya2VkLyIsInNvdXJjZXMiOlsibWFya2VkL2Vucm91dGUuYXR0ci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekM7SUFLRSx1QkFBb0IsRUFBYyxFQUFVLE1BQWM7UUFBdEMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFEdEMsWUFBTyxHQUFHLEVBQUUsQ0FBQztJQUM2QixDQUFDOzs7OztJQUV4RCwrQkFBTzs7OztJQURkLFVBQ2UsS0FBSzs7WUFDWixJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTs7WUFDOUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztZQUNyQixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7WUFDVCxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFDeEMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFOztnQkFDakIsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztnQkFDckIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNOzs7OztZQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ3hCLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLENBQUMsR0FBRSxDQUFDLENBQUM7O2dCQUNELEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDakMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbkMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUM7YUFBTTtZQUNMLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FDbEM7UUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLEdBQUcsRUFBRTtZQUNoQyxJQUFJLElBQUksRUFBRTtnQkFDUixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxVQUFBLEVBQUUsQ0FBQyxDQUFDO2FBQzVDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUMsQ0FBQzthQUN4QztZQUNELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN4QjthQUFNO1lBQ0wsT0FBTztTQUNSO0lBQ0gsQ0FBQzs7Z0JBbkNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtpQkFDeEI7Ozs7Z0JBTDBCLFVBQVU7Z0JBQzVCLE1BQU07OzswQkFNWixLQUFLLFNBQUMsV0FBVzswQkFFakIsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUE4Qm5DLG9CQUFDO0NBQUEsQUFwQ0QsSUFvQ0M7U0FqQ1ksYUFBYTs7O0lBQ3hCLGdDQUFpQzs7Ozs7SUFDckIsMkJBQXNCOzs7OztJQUFFLCtCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NtRW5yb3V0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIENtRW5yb3V0ZUF0dHIge1xuICBASW5wdXQoJ2NtRW5yb3V0ZScpIGJhc2VVcmwgPSAnJztcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikgeyB9XG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgcHVibGljIG9uQ2xpY2soZXZlbnQpIHtcbiAgICBjb25zdCBhdHRyID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaHJlZicpIHx8ICcnO1xuICAgIGNvbnN0IG0gPSBhdHRyLnNwbGl0KCcjJyk7XG4gICAgbGV0IGhyZWYgPSBtWzBdO1xuICAgIGNvbnN0IGZyYWdtZW50ID0gbVsxXTtcbiAgICBpZiAoaHJlZi5zdGFydHNXaXRoKCdodHRwJykpIHsgcmV0dXJuOyB9XG4gICAgaWYgKGhyZWYuaW5jbHVkZXMoJy4uJykpIHtcbiAgICAgIGNvbnN0IG1lZyA9IGhyZWYuc3BsaXQoJy8nKTtcbiAgICAgIGNvbnN0IG4gPSBtZWcucmVkdWNlKChyLCBrKSA9PiB7XG4gICAgICAgIHJldHVybiBrID09PSAnLi4nID8gciArIDEgOiByO1xuICAgICAgfSwgMCk7XG4gICAgICBsZXQgc2VnID0gdGhpcy5iYXNlVXJsLnNwbGl0KCcvJyk7XG4gICAgICBzZWcgPSBzZWcuc2xpY2UoMCwgc2VnLmxlbmd0aCAtIG4pO1xuICAgICAgbWVnLnNwbGljZSgwLCBuKTtcbiAgICAgIGhyZWYgPSBzZWcuam9pbignLycpICsgJy8nICsgbWVnLmpvaW4oJy8nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaHJlZiA9IHRoaXMuYmFzZVVybCArICcvJyArIGhyZWY7XG4gICAgfVxuICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZSA9PT0gJ0EnKSB7XG4gICAgICBpZiAoaHJlZikge1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbaHJlZl0sIHsgZnJhZ21lbnQgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXSwgeyBmcmFnbWVudCB9KTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn1cbiJdfQ==