/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Component, Inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { MdLib, mdLib } from './lib';
/**
 * <cm-marked str='*markdown*'>
 */
var CmMarkedTag = /** @class */ (function () {
    /**
     * @param sanitizer see external DomSanitizer
     * @param lib see [[MdLib]]
     */
    function CmMarkedTag(sanitizer, lib) {
        this.sanitizer = sanitizer;
        this.lib = lib;
        this.baseUrl = '';
        this._str = '';
    }
    Object.defineProperty(CmMarkedTag.prototype, "str", {
        /**
         * str for set markdown string
         */
        set: /**
         * str for set markdown string
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._str = v;
            /** @type {?} */
            var r = this.lib.parse(v);
            this.html = this.sanitizer.bypassSecurityTrustHtml(r);
        },
        enumerable: true,
        configurable: true
    });
    CmMarkedTag.decorators = [
        { type: Component, args: [{
                    selector: 'cm-marked',
                    template: "<div [cmEnroute]='baseUrl' [innerHtml]='html'></div>\n",
                    styles: [":host{outline:0;border:0}"]
                }] }
    ];
    /** @nocollapse */
    CmMarkedTag.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: MdLib, decorators: [{ type: Inject, args: [mdLib,] }] }
    ]; };
    CmMarkedTag.propDecorators = {
        baseUrl: [{ type: Input }],
        str: [{ type: Input }]
    };
    return CmMarkedTag;
}());
export { CmMarkedTag };
if (false) {
    /** @type {?} */
    CmMarkedTag.prototype.baseUrl;
    /** @type {?} */
    CmMarkedTag.prototype.html;
    /**
     * @type {?}
     * @private
     */
    CmMarkedTag.prototype._str;
    /**
     * @type {?}
     * @private
     */
    CmMarkedTag.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    CmMarkedTag.prototype.lib;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VkLnRhZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjaGFrcmF5L21hcmtlZC8iLCJzb3VyY2VzIjpbIm1hcmtlZC9tYXJrZWQudGFnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBRW5FLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sT0FBTyxDQUFDOzs7O0FBS3JDO0lBa0JFOzs7T0FHRztJQUNILHFCQUFvQixTQUF1QixFQUNSLEdBQVU7UUFEekIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUNSLFFBQUcsR0FBSCxHQUFHLENBQU87UUFqQnBDLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFXZCxTQUFJLEdBQUcsRUFBRSxDQUFDO0lBTStCLENBQUM7SUFibEQsc0JBQWEsNEJBQUc7UUFIaEI7O1dBRUc7Ozs7OztRQUNILFVBQWlCLENBQUM7WUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7O2dCQUNSLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELENBQUM7OztPQUFBOztnQkFkRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLGtFQUFnQzs7aUJBRWpDOzs7O2dCQVhRLFlBQVk7Z0JBRVosS0FBSyx1QkE0QkMsTUFBTSxTQUFDLEtBQUs7OzswQkFqQnhCLEtBQUs7c0JBSUwsS0FBSzs7SUFjUixrQkFBQztDQUFBLEFBeEJELElBd0JDO1NBbkJZLFdBQVc7OztJQUN0Qiw4QkFBc0I7O0lBVXRCLDJCQUFlOzs7OztJQUNmLDJCQUFrQjs7Ozs7SUFLTixnQ0FBK0I7Ozs7O0lBQy9CLDBCQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhvc3RCaW5kaW5nLCBJbnB1dCwgQ29tcG9uZW50LCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuaW1wb3J0IHsgTWRMaWIsIG1kTGliIH0gZnJvbSAnLi9saWInO1xuXG4vKipcbiAqIDxjbS1tYXJrZWQgc3RyPScqbWFya2Rvd24qJz5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY20tbWFya2VkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21hcmtlZC50YWcuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL21hcmtlZC50YWcuc2FzcyddXG59KVxuZXhwb3J0IGNsYXNzIENtTWFya2VkVGFnIHtcbiAgQElucHV0KCkgYmFzZVVybCA9ICcnO1xuICAvKipcbiAgICogc3RyIGZvciBzZXQgbWFya2Rvd24gc3RyaW5nXG4gICAqL1xuICBASW5wdXQoKSBzZXQgc3RyKHYpIHtcbiAgICB0aGlzLl9zdHIgPSB2O1xuICAgIGNvbnN0IHIgPSB0aGlzLmxpYi5wYXJzZSh2KTtcbiAgICB0aGlzLmh0bWwgPSB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChyKTtcbiAgfVxuICAvLyBASG9zdEJpbmRpbmcoJ2lubmVySHRtbCcpXG4gIGh0bWw6IFNhZmVIdG1sO1xuICBwcml2YXRlIF9zdHIgPSAnJztcbiAgLyoqXG4gICAqIEBwYXJhbSBzYW5pdGl6ZXIgc2VlIGV4dGVybmFsIERvbVNhbml0aXplclxuICAgKiBAcGFyYW0gbGliIHNlZSBbW01kTGliXV1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXG4gICAgICAgICAgICAgIEBJbmplY3QobWRMaWIpIHByaXZhdGUgbGliOiBNZExpYikgeyB9XG59XG4iXX0=