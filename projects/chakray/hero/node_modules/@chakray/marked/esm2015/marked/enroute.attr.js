/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Directive, ElementRef, HostListener } from '@angular/core';
import { Router } from '@angular/router';
export class CmEnrouteAttr {
    /**
     * @param {?} el
     * @param {?} router
     */
    constructor(el, router) {
        this.el = el;
        this.router = router;
        this.baseUrl = '';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        /** @type {?} */
        const attr = event.target.getAttribute('href') || '';
        /** @type {?} */
        const m = attr.split('#');
        /** @type {?} */
        let href = m[0];
        /** @type {?} */
        const fragment = m[1];
        if (href.startsWith('http')) {
            return;
        }
        if (href.includes('..')) {
            /** @type {?} */
            const meg = href.split('/');
            /** @type {?} */
            const n = meg.reduce((/**
             * @param {?} r
             * @param {?} k
             * @return {?}
             */
            (r, k) => {
                return k === '..' ? r + 1 : r;
            }), 0);
            /** @type {?} */
            let seg = this.baseUrl.split('/');
            seg = seg.slice(0, seg.length - n);
            meg.splice(0, n);
            href = seg.join('/') + '/' + meg.join('/');
        }
        else {
            href = this.baseUrl + '/' + href;
        }
        if (event.target.tagName === 'A') {
            if (href) {
                this.router.navigate([href], { fragment });
            }
            else {
                this.router.navigate([], { fragment });
            }
            event.preventDefault();
        }
        else {
            return;
        }
    }
}
CmEnrouteAttr.decorators = [
    { type: Directive, args: [{
                selector: '[cmEnroute]'
            },] }
];
/** @nocollapse */
CmEnrouteAttr.ctorParameters = () => [
    { type: ElementRef },
    { type: Router }
];
CmEnrouteAttr.propDecorators = {
    baseUrl: [{ type: Input, args: ['cmEnroute',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    CmEnrouteAttr.prototype.baseUrl;
    /**
     * @type {?}
     * @private
     */
    CmEnrouteAttr.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CmEnrouteAttr.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5yb3V0ZS5hdHRyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNoYWtyYXkvbWFya2VkLyIsInNvdXJjZXMiOlsibWFya2VkL2Vucm91dGUuYXR0ci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFLekMsTUFBTSxPQUFPLGFBQWE7Ozs7O0lBRXhCLFlBQW9CLEVBQWMsRUFBVSxNQUFjO1FBQXRDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRHRDLFlBQU8sR0FBRyxFQUFFLENBQUM7SUFDNkIsQ0FBQzs7Ozs7SUFFeEQsT0FBTyxDQUFDLEtBQUs7O2NBQ1osSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7O2NBQzlDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7WUFDckIsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O2NBQ1QsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQ3hDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTs7a0JBQ2pCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7a0JBQ3JCLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTTs7Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDNUIsT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsQ0FBQyxHQUFFLENBQUMsQ0FBQzs7Z0JBQ0QsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUNqQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNuQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM1QzthQUFNO1lBQ0wsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztTQUNsQztRQUNELElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssR0FBRyxFQUFFO1lBQ2hDLElBQUksSUFBSSxFQUFFO2dCQUNSLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQzVDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7YUFDeEM7WUFDRCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDeEI7YUFBTTtZQUNMLE9BQU87U0FDUjtJQUNILENBQUM7OztZQW5DRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7YUFDeEI7Ozs7WUFMMEIsVUFBVTtZQUM1QixNQUFNOzs7c0JBTVosS0FBSyxTQUFDLFdBQVc7c0JBRWpCLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUFGakMsZ0NBQWlDOzs7OztJQUNyQiwyQkFBc0I7Ozs7O0lBQUUsK0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY21FbnJvdXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgQ21FbnJvdXRlQXR0ciB7XG4gIEBJbnB1dCgnY21FbnJvdXRlJykgYmFzZVVybCA9ICcnO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7IH1cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBwdWJsaWMgb25DbGljayhldmVudCkge1xuICAgIGNvbnN0IGF0dHIgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJyc7XG4gICAgY29uc3QgbSA9IGF0dHIuc3BsaXQoJyMnKTtcbiAgICBsZXQgaHJlZiA9IG1bMF07XG4gICAgY29uc3QgZnJhZ21lbnQgPSBtWzFdO1xuICAgIGlmIChocmVmLnN0YXJ0c1dpdGgoJ2h0dHAnKSkgeyByZXR1cm47IH1cbiAgICBpZiAoaHJlZi5pbmNsdWRlcygnLi4nKSkge1xuICAgICAgY29uc3QgbWVnID0gaHJlZi5zcGxpdCgnLycpO1xuICAgICAgY29uc3QgbiA9IG1lZy5yZWR1Y2UoKHIsIGspID0+IHtcbiAgICAgICAgcmV0dXJuIGsgPT09ICcuLicgPyByICsgMSA6IHI7XG4gICAgICB9LCAwKTtcbiAgICAgIGxldCBzZWcgPSB0aGlzLmJhc2VVcmwuc3BsaXQoJy8nKTtcbiAgICAgIHNlZyA9IHNlZy5zbGljZSgwLCBzZWcubGVuZ3RoIC0gbik7XG4gICAgICBtZWcuc3BsaWNlKDAsIG4pO1xuICAgICAgaHJlZiA9IHNlZy5qb2luKCcvJykgKyAnLycgKyBtZWcuam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBocmVmID0gdGhpcy5iYXNlVXJsICsgJy8nICsgaHJlZjtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICAgIGlmIChocmVmKSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtocmVmXSwgeyBmcmFnbWVudCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtdLCB7IGZyYWdtZW50IH0pO1xuICAgICAgfVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufVxuIl19