/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Component, Inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { MdLib, mdLib } from './lib';
/**
 * <cm-marked str='*markdown*'>
 */
export class CmMarkedTag {
    /**
     * @param {?} sanitizer see external DomSanitizer
     * @param {?} lib see [[MdLib]]
     */
    constructor(sanitizer, lib) {
        this.sanitizer = sanitizer;
        this.lib = lib;
        this.baseUrl = '';
        this._str = '';
    }
    /**
     * str for set markdown string
     * @param {?} v
     * @return {?}
     */
    set str(v) {
        this._str = v;
        /** @type {?} */
        const r = this.lib.parse(v);
        this.html = this.sanitizer.bypassSecurityTrustHtml(r);
    }
}
CmMarkedTag.decorators = [
    { type: Component, args: [{
                selector: 'cm-marked',
                template: "<div [cmEnroute]='baseUrl' [innerHtml]='html'></div>\n",
                styles: [":host{outline:0;border:0}"]
            }] }
];
/** @nocollapse */
CmMarkedTag.ctorParameters = () => [
    { type: DomSanitizer },
    { type: MdLib, decorators: [{ type: Inject, args: [mdLib,] }] }
];
CmMarkedTag.propDecorators = {
    baseUrl: [{ type: Input }],
    str: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CmMarkedTag.prototype.baseUrl;
    /** @type {?} */
    CmMarkedTag.prototype.html;
    /**
     * @type {?}
     * @private
     */
    CmMarkedTag.prototype._str;
    /**
     * @type {?}
     * @private
     */
    CmMarkedTag.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    CmMarkedTag.prototype.lib;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VkLnRhZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjaGFrcmF5L21hcmtlZC8iLCJzb3VyY2VzIjpbIm1hcmtlZC9tYXJrZWQudGFnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBRW5FLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sT0FBTyxDQUFDOzs7O0FBVXJDLE1BQU0sT0FBTyxXQUFXOzs7OztJQWlCdEIsWUFBb0IsU0FBdUIsRUFDUixHQUFVO1FBRHpCLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFDUixRQUFHLEdBQUgsR0FBRyxDQUFPO1FBakJwQyxZQUFPLEdBQUcsRUFBRSxDQUFDO1FBV2QsU0FBSSxHQUFHLEVBQUUsQ0FBQztJQU0rQixDQUFDOzs7Ozs7SUFibEQsSUFBYSxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQzs7Y0FDUixDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDOzs7WUFkRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLGtFQUFnQzs7YUFFakM7Ozs7WUFYUSxZQUFZO1lBRVosS0FBSyx1QkE0QkMsTUFBTSxTQUFDLEtBQUs7OztzQkFqQnhCLEtBQUs7a0JBSUwsS0FBSzs7OztJQUpOLDhCQUFzQjs7SUFVdEIsMkJBQWU7Ozs7O0lBQ2YsMkJBQWtCOzs7OztJQUtOLGdDQUErQjs7Ozs7SUFDL0IsMEJBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSG9zdEJpbmRpbmcsIElucHV0LCBDb21wb25lbnQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5pbXBvcnQgeyBNZExpYiwgbWRMaWIgfSBmcm9tICcuL2xpYic7XG5cbi8qKlxuICogPGNtLW1hcmtlZCBzdHI9JyptYXJrZG93bionPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbS1tYXJrZWQnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWFya2VkLnRhZy5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbWFya2VkLnRhZy5zYXNzJ11cbn0pXG5leHBvcnQgY2xhc3MgQ21NYXJrZWRUYWcge1xuICBASW5wdXQoKSBiYXNlVXJsID0gJyc7XG4gIC8qKlxuICAgKiBzdHIgZm9yIHNldCBtYXJrZG93biBzdHJpbmdcbiAgICovXG4gIEBJbnB1dCgpIHNldCBzdHIodikge1xuICAgIHRoaXMuX3N0ciA9IHY7XG4gICAgY29uc3QgciA9IHRoaXMubGliLnBhcnNlKHYpO1xuICAgIHRoaXMuaHRtbCA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHIpO1xuICB9XG4gIC8vIEBIb3N0QmluZGluZygnaW5uZXJIdG1sJylcbiAgaHRtbDogU2FmZUh0bWw7XG4gIHByaXZhdGUgX3N0ciA9ICcnO1xuICAvKipcbiAgICogQHBhcmFtIHNhbml0aXplciBzZWUgZXh0ZXJuYWwgRG9tU2FuaXRpemVyXG4gICAqIEBwYXJhbSBsaWIgc2VlIFtbTWRMaWJdXVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICAgICAgICAgICAgQEluamVjdChtZExpYikgcHJpdmF0ZSBsaWI6IE1kTGliKSB7IH1cbn1cbiJdfQ==